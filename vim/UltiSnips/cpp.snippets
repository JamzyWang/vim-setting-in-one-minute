############### Main	主函数的自动补全方法

# main	带命令行参数的主函数
snippet main
int main(int argc, const char *argv[])
{
	${0}
	return 0;
}
endsnippet

# main(void)	不带参数的主函数
snippet mainn
int main(void)
{
	${0}
	return 0;
}
endsnippet

##
## Preprocessor		预处理的各种

# #include <...>	标准库函数中的头文件
snippet inc
#include <${1:iostream}>
endsnippet

# #include "..."	项目中创建的头文件
snippet Inc
#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet

# ifndef...define...endif
snippet ndef
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

# define
snippet def
#define
endsnippet

# ifdef...endif
snippet ifdef
#ifdef ${1:FOO}
	${2:#define }
#endif
endsnippet

# if
snippet #if
#if ${1:FOO}
	${0}
#endif
endsnippet

# header include guard 防止头文件重复包含
snippet once
#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

#define $1

${0}

#endif /* end of include guard: $1 */
endsnippet

##
## Control Statements    各种控制语句的补全

# if
snippet if
if (${1:/* condition */})
{
	${2}
}
endsnippet

# else
snippet el
else {
	${1}
}
endsnippet

# else if
snippet elif
else if (${1:/* condition */}) {
	${2}
}
endsnippet

# ifi
snippet ifi
if (${1:/* condition */}) ${2};
endsnippet

# ternary
snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch
switch (${1:/* variable */}) 
{
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
	}
endsnippet

# switch without default
snippet switchndef
switch (${1:/* variable */}) 
{
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}
endsnippet

# case
snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

##
## Loops   各种循环语句的自动补全
# for
snippet for
for (${2:int i} = 0; i < ${1:count}; i${3:++}) 
{
	${4}
}
endsnippet

# for (custom)
snippet forr
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) 
{
	${5}
}
endsnippet	

# while
snippet wh
while (${1:/* condition */}) 
{
	${2}
}
endsnippet

# do... while
snippet do
do {
	${2}
} while (${1:/* condition */});
endsnippet

##
## Functions 函数的各种自动补全

# function definition
snippet fun
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

# function declaration
snippet fund
${1:void} ${2:function_name}(${3});
endsnippet

##
## Types

# typedef
snippet td
typedef ${1:int} ${2:MyCustomType};
endsnippet

# struct
snippet st
struct ${1:`vim_snippets#Filename('$1_t', 'name')`} 
{
	${2:/* data */}
}${3: /* optional variable list */};
endsnippet

# typedef struct
snippet tds
typedef struct ${2:_$1 }
{
	${3:/* data */}
} ${1:`vim_snippets#Filename('$1_t', 'name')`};
endsnippet

# typedef enum
snippet tde
typedef enum 
{
	${1:/* data */}
} ${2:foo};
endsnippet

##
## Input/Output

# printf
snippet pr
printf("${1:%s}\n"${2});
endsnippet

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet

# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
endsnippet

##
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
endsnippet

# GPL
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, see <http://www.gnu.org/licenses/>.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */

	${0}
endsnippet


## STL Collections

# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet

# std::vector
snippet vector
std::vector<${1:T}> ${2};
endsnippet

# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet

# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet

# std::list
snippet list
std::list<${1:T}> ${2};
endsnippet

# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet

# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet

# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet

# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet

# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet

# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet

# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet

##
## Access Modifiers
# private
snippet pri
private
endsnippet

# protected
snippet pro
protected
endsnippet

# public
snippet pub
public
endsnippet

# friend
snippet fr
friend
endsnippet

# mutable
snippet mu
mutable
endsnippet

##
## Class
# class
snippet cl
class ${1:`vim_snippets#Filename('$1', 'name')`}
{
	public:
		$1(${2});
		~$1();

	private:
		${0:/* data */}
};
endsnippet

# member function implementation
snippet mfun
${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${0}
}
endsnippet

# namespace
snippet ns
namespace ${1:`vim_snippets#Filename('', 'my')`} {
	${0}
} /* namespace $1 */
endsnippet

snippet name
using namespace std;
endsnippet

##
## Input/Output
# std::cout
snippet cout
std::cout << ${1} << std::endl;
endsnippet

# std::cin
snippet cin
std::cin >> ${1};
endsnippet

##
## Iteration
# for i
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) 
{
	${4}
}
endsnippet

# foreach
snippet fore
for (${1:auto} ${2:i} : ${3:container})
{
	${4}
}
endsnippet

# iterator
snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) 
{
	${6}
}
endsnippet

# auto iterator
snippet itera
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) 
{
	${3:std::cout << *$1 << std::endl;}
}
endsnippet

##
## Lambdas
# lamda (one line)
snippet ld
[${1}](${2}){${3}}
endsnippet

# lambda (multi-line)
snippet lld
[${1}](${2}){
	${3}
}
endsnippet

